package dreamwisp.visual.particles {	import com.demonsters.debugger.MonsterDebugger;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Rectangle;		/**	 * ...	 * @author Brandon	 */		public class ParticleManager 	{		private static var particleList:CircularParticleArray;		public static var bitmap:Bitmap;		private static var bitmapData:BitmapData;		private static var bitmapRect:Rectangle;				public static function init(capacity:uint):void 		{			particleList = new CircularParticleArray(capacity);			bitmap = new Bitmap();		}				public static function createCanvas(width:uint, height:uint):void 		{			bitmapRect = new Rectangle(0, 0, width, height);			bitmapData = new BitmapData(width, height, true, 0);			bitmap.bitmapData = bitmapData;		}				public static function createParticle(img:BitmapData, rX:int, rY:int, rW:int, rH:int, x:int, y:int, velX:Number, velY:Number, duration:uint, scale:Number = 1, color:int = 0xFFFFFF):void 		{			var particle:Particle;			if (particleList.numActive == particleList.capacity())			{				particle = particleList.getP(0);				particleList.setStart( particleList.getStart() + 1);			}			else 			{				particle = particleList.getP(particleList.numActive);				particleList.numActive++;			}						particle.srcImage = img;			particle.rect.x = rX;			particle.rect.y = rY;			particle.rect.width = rW;			particle.rect.height = rH;						// test for bitmapData size difference			var bitmapData:BitmapData = particle.bitmap.bitmapData;			if (rW != bitmapData.width || rH != bitmapData.height)				particle.bitmap.bitmapData = new BitmapData(rW, rH);						particle.x = x;			particle.y = y;			particle.velocityX = velX;			particle.velocityY = velY;			particle.duration = duration;			particle.scale = scale;			particle.color = color;			particle.percentLife = 1.0;		}				public static function update():void 		{			bitmapData.fillRect(bitmapRect, 0);			var removalCount:uint = 0;			for (var i:uint = 0; i < particleList.numActive; i++) 			{				var p:Particle = particleList.getP(i);								// update particle code here				p.update(bitmapData);								swap(particleList, i - removalCount, i);								if (p.percentLife <= 0)					removalCount++;			}			particleList.numActive -= removalCount;		}				public static function randomSign():int		{			return (Math.random() > 0.5) ? 1 : -1;		}				private static function swap(list:CircularParticleArray, index1:uint, index2:uint):void 		{			const temp:Particle = list.getP(index1);			list.setP(index1, list.getP(index2));			list.setP(index2, temp);		}			}}