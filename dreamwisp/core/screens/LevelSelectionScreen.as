package dreamwisp.core.screens{	import dreamwisp.core.GameScreen;	import dreamwisp.input.InputState;		/**	 * ...	 * @author Brandon	 */		public class LevelSelectionScreen extends GameScreen	{		/// Horizontal distance from first item to edge		private var marginX:Number;		/// Vertical distance from first item to edge		private var marginY:Number;		/// Horizontal distance between items		private var paddingX:Number;		/// Vertical distance between items		private var paddingY:Number;		/// Max items allowed horizontally		private var gridWidth:uint;		/// Max items allowed vertically		private var gridHeight:uint;				protected var levels:Vector.<LevelSelection>;				// formFactor decides how the LevelSelections are arranged		// lineHorizontal and lineVertical		// 2d square grid		// along a curved path 		// free form		public static const FORMAT_LINE_STRAIGHT:uint = 1;		public static const FORMAT_LINE_CURVE:uint = 2;		public static const FORMAT_FREE:uint = 3;		public static const FORMAT_GRID_SQUARE:uint = 4;				public function LevelSelectionScreen(totalLevels:uint, format:uint,			marginX:Number = 0, marginY:Number = 0, 			paddingX:Number = 0, paddingY:Number = 0,			gridWidth:uint = 0, gridHeight:uint = 0)		{			super();			this.marginX = marginX;			this.marginY = marginY;			this.paddingX = paddingX;			this.paddingY = paddingY;			this.gridWidth = gridWidth;			this.gridHeight = gridHeight;						levels = new Vector.<LevelSelection>(totalLevels, true);						for (var i:int = 0; i < levels.length; i++)				levels[i] = new LevelSelection();							arrange(format);		}				/**		 * Sets all the levels into the certain format.		 */		public function arrange(format:uint):void 		{			var i:int = 0;			if (format == FORMAT_LINE_STRAIGHT) 			{				for (i = 0; i < levels.length; i++) 				{					levels[i].x = marginX + (i * paddingX);					levels[i].y = marginY + (i * paddingY);				}			}			else if (format == FORMAT_LINE_CURVE) 			{				for (i = 0; i < levels.length; i++) 				{					levels[i].x = marginX + (i * paddingX);					levels[i].y = marginY + (i * paddingY);				}			}			else if (format == FORMAT_FREE) 			{							}			else if (format == FORMAT_GRID_SQUARE) 			{							}					}				override public function handleInput(inputState:InputState):void		{			super.handleInput(inputState);			// input navigation through keyboard keys and mouse movement						// handle selection confirmation:			// launch( levelSelection.confirm()/getLevelCode() );			// if levelCode == -1 don't launch because it's locked		}					}}