package dreamwisp.core.screens {	import dreamwisp.core.Game;	import dreamwisp.core.GameScreen;	import dreamwisp.input.InputState;	import dreamwisp.input.KeyMap;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.ui.Keyboard;	import org.osflash.signals.Signal;		/**	 * ...	 * @author Brandon	 */	public class MenuScreen extends GameScreen 	{		protected var mc:MovieClip;		private var buttons:Vector.<SimpleButton>;		private var selectedButton:SimpleButton;				public var buttonPressed:Signal;				public function MenuScreen(game:Game, mc:MovieClip) 		{			super(game);			this.mc = mc;			detectButtons();						selectID(0);						keyMap = new KeyMap();			keyMap.bind( [Keyboard.LEFT, Keyboard.UP], scrollPrev);			keyMap.bind( [Keyboard.RIGHT, Keyboard.DOWN], scrollNext);			keyMap.bind( [Keyboard.SPACE, Keyboard.ENTER], confirm );						buttonPressed = new Signal(String);			buttonPressed.add(handleButtonPress);		}				private function scrollPrev():void 		{			const id:int = currentID() - 1;						var mod:int = (id % buttons.length);			if (mod < 0)				mod += buttons.length;			selectID( mod );		}				private function scrollNext():void 		{			selectID( (currentID() + 1) % buttons.length );		}				/**		 * Adds all buttons of the MenuScreen MovieClip into the buttons vector.		 * Override when using different button naming scheme or special behavior.		 */		protected function detectButtons():void 		{			buttons = new Vector.<SimpleButton>();			var btnNum:uint = 1;			while (mc.getChildByName("B" + btnNum) != null)			{				var button:SimpleButton = mc.getChildByName("B" + btnNum) as SimpleButton;				button.useHandCursor = false;				button.mouseEnabled = false;				buttons.push(button);				btnNum++;			}		}				override public function handleInput(inputState:InputState):void 		{			super.handleInput(inputState);						const mX:int = inputState.mouseX;			const mY:int = inputState.mouseY;			var button:SimpleButton = null;			for each (var btn:SimpleButton in buttons) 			{				if (btn.hitTestPoint(mX, mY))				{										button = btn;					break;				}			}			if (button != null)			{				select(button);				if (inputState.wasMouseClicked())					confirm();			}		}				protected function select(button:SimpleButton):void 		{			if (selectedButton != null)				swapState(selectedButton);			selectedButton = button;			swapState(button);		}				private function selectID(btnID:uint):void 		{			select(buttons[btnID]);		}				/**		 * Toggles the hover state of the provided button.		 * Swapping is only way to do so without the native event listeners.		 */		private function swapState(button:SimpleButton):void 		{			const upState:DisplayObject = button.upState;			button.upState = button.overState;			button.overState = upState;		}				private function confirm():void 		{			const btnCode:String = selectedButton.name;			buttonPressed.dispatch(btnCode);		}				protected function handleButtonPress(btnCode:String):void 		{			throw new Error("Must override abstract method handleButtonPress and ignore super call");		}				private function currentID():uint 		{			return buttons.indexOf( selectedButton );		}			}}