package dreamwisp.ui {	import flash.text.TextField;		/**	 * TypeWriter transfers a String to a TextField bit-by-bit.	 * @author Brandon	 */		public class TypeWriter 	{		private var textField:TextField;		private var loadedText:String;		private var displayedText:String;		private var transferSpeed:uint;				public function TypeWriter(textField:TextField, transferSpeed:uint = 1)		{			this.textField = textField;			this.transferSpeed = transferSpeed;		}				public function load(text:String):void 		{			loadedText = text;			displayedText = "";		}				/**		 * Transfers a cut of the loaded text onto the display.		 * @return true if still has text to transfer, false otherwise		 */		public function write():Boolean		{			// analyze amount of chars to be cut every tick			var length:int = transferSpeed;			// detects HTML tags and pastes entirety in one tick			const tagIndex:uint = loadedText.indexOf("<");			if (tagIndex < length && tagIndex >= 0)				length = loadedText.indexOf(">");			// cut and paste to the display			displayedText += loadedText.substr(0, length);			loadedText = loadedText.substr(length);						if (loadedText.length == 0)				return false;			return true;		}				/**		 * Completely transfer all loaded text to the display		 */		public function finish():void 		{			displayedText += loadedText;			loadedText = "";		}				public function render():void 		{			textField.htmlText = displayedText;		}			}}